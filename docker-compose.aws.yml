version: '2.2'
services:
  aws:
    image: amazon/aws-cli:2.13.9
    env_file: .env
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_ROLE_ARN
      - AWS_SESSION_NAME
      - AWS_SESSION_TOKEN
      - AWS_REGION
  update-eks-kubeconfig:
    extends: aws
    volumes:
      - ${TMPDIR:-/tmp}:/tmp
    environment:
      - CLUSTER_NAME
    # This command writes a kubeconfig that does not require retrieving
    # a token via the aws-cli at runtime.
    entrypoint: sh
    command:
      - -c
      - |
        server=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query 'cluster.endpoint' --output text)
        token=$(aws eks get-token --cluster-name "$CLUSTER_NAME" --query 'status.token' --output text)
        cert_data=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query 'cluster.certificateAuthority.data' --output text)
        cat >/tmp/kubeconfig <<-EOF
        apiVersion: v1
        kind: Config
        preferences: {}
        current-context: context
        clusters:
          - name: cluster
            cluster:
              certificate-authority-data: $$cert_data
              server: $$server
        users:
          - name: user
            user:
              token: $$token
        contexts:
          - name: context
            context:
              cluster: cluster
              user: user
        EOF
  obtain-aws-session-credentials:
    extends: aws
    environment:
      AWS_SESSION_TOKEN: ""
    volumes:
      - ${TMPDIR:-/tmp}/.aws-sts-token-data:/tmp
    entrypoint: sh
    command:
      - -c
      - |
        if test -f /tmp/aws_token && test -f /tmp/aws_token_exp
        then
          now=$(date +%s)
          exp=$(cat /tmp/aws_token_exp)
          if test -n "$$exp" && test "$$now" -lt "$$exp"
          then
            >&2 echo "INFO: Existing unexpired token; returning"
            cat /tmp/aws_token
            exit 0
          fi
        fi
        >&2 echo "INFO: Renewing AWS session token."
        token_duration_minutes=60; \
        aws_token=$(aws sts assume-role \
          --role-arn "$AWS_ROLE_ARN" \
          --external-id "$AWS_STS_EXTERNAL_ID" \
          --role-session-name "$AWS_SESSION_NAME" \
          --duration-seconds $$((60*$$token_duration_minutes)) \
           --query 'join(``, [
                    `\nexport `, `AWS_ACCESS_KEY_ID=`, Credentials.AccessKeyId,
                    `\nexport `, `AWS_SECRET_ACCESS_KEY=`, Credentials.SecretAccessKey,
                    `\nexport `, `AWS_SESSION_TOKEN=`, Credentials.SessionToken
                    ])' \
          --output text) || exit 1
        date -d "+$$token_duration_minutes min" +%s > /tmp/aws_token_exp
        >&2 echo "INFO: Token renewed; expires in $$token_duration_minutes minutes."
        echo "$$aws_token" | tee /tmp/aws_token
